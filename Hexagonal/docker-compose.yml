services:

  rabbitmq:
    container_name: 'rabbitmq'
    image: 'rabbitmq:3-management'
    environment:
      - 'RABBITMQ_DEFAULT_USER=admin'
      - 'RABBITMQ_DEFAULT_PASS=adminpassword'
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - mongonet
      - monitoring

  mongo_1:
    build: .
    image: mongocustom:7.0.2
    container_name: mongodb1
    hostname: mongodb1
    networks:
      - mongonet
      - monitoring
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=vmrental
    command: --config /etc/mongod.conf --port 27017 --replSet replica_set_single
    healthcheck:
      test: [ "CMD","mongosh","--port", "27017", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 2s
      retries: 5

  mongo_2:
    build: .
    image: mongocustom:7.0.2
    container_name: mongodb2
    hostname: mongodb2
    networks:
      - mongonet
      - monitoring
    ports:
      - "27018:27018"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=vmrental
    command: --config /etc/mongod.conf --port 27018 --replSet replica_set_single
    healthcheck:
      test: [ "CMD","mongosh","--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 2s
      retries: 5

  mongo_3:
    build: .
    image: mongocustom:7.0.2
    container_name: mongodb3
    hostname: mongodb3
    networks:
      - mongonet
      - monitoring
    ports:
      - "27019:27019"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=vmrental
    command: --config /etc/mongod.conf --port 27019 --replSet replica_set_single
    healthcheck:
      test: [ "CMD","mongosh","--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 2s
      retries: 5

  mongoinit:
    build: .
    image: mongocustom:7.0.2
    container_name: mongodbinit
    hostname: mongodbinit
    networks:
      - mongonet
    depends_on:
      mongo_1:
        condition: service_healthy
      mongo_2:
        condition: service_healthy
      mongo_3:
        condition: service_healthy
    command: >
      mongosh --host mongodb1:27017 --username admin --password adminpassword --authenticationDatabase admin --eval
      '      
      rsconf = 
      {
        _id: "replica_set_single",
        version: 1,
        members: [
          { _id: 0, host : "mongodb1:27017" },
          { _id: 1, host : "mongodb2:27018" },
          { _id: 2, host : "mongodb3:27019" }
        ] 
      };
      rs.initiate(rsconf);
      '

  usermongo1:
    build: .
    image: mongocustom:7.0.2
    container_name: usermongo1
    hostname: usermongo1
    networks:
      - mongonet
      - monitoring
    ports:
      - "27117:27117"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=vmrental
    command: --config /etc/mongod.conf --port 27117
    healthcheck:
      test: ["CMD","mongosh", "--port", "27117", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5

  usermongo2:
    build: .
    container_name: usermongo2
    hostname: usermongo2
    networks:
      - mongonet
      - monitoring
    ports:
      - "27118:27118"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=vmrental
    command: --config /etc/mongod.conf --port 27118
    healthcheck:
      test: ["CMD","mongosh", "--port", "27118", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5

  usermongo3:
    build: .
    container_name: usermongo3
    hostname: usermongo3
    networks:
      - mongonet
      - monitoring
    ports:
      - "27119:27119"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=vmrental
    command: --config /etc/mongod.conf --port 27119
    healthcheck:
      test: ["CMD","mongosh", "--port", "27119", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5

  usermongoinit:
    build: .
    hostname: usermongoinit
    container_name: usermongoinit
    networks:
      - mongonet
    depends_on:
      usermongo1:
        condition: service_healthy
      usermongo2:
        condition: service_healthy
      usermongo3:
        condition: service_healthy
    command: >
      mongosh --host usermongo1:27117 --username admin --password adminpassword --authenticationDatabase admin --eval
      '
      rs.initiate(
        {
          _id: "replica_set_single",
          version: 1,
          members: [
            {_id:0, host : "usermongo1:27117" },
            {_id:1, host : "usermongo2:27118" },
            {_id:2, host : "usermongo3:27119" }
          ]
        }
      );
      '

  # Prometheus - zbiera metryki
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    restart: unless-stopped

  # Grafana - dashboardy i wizualizacje
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    restart: unless-stopped

  # Blackbox exporter - do testowania HTTP endpoints
  blackbox:
    image: prom/blackbox-exporter:latest
    container_name: blackbox
    ports:
      - "9115:9115"
    volumes:
      - ./monitoring/blackbox.yml:/etc/blackbox_exporter/config.yml
    networks:
      - monitoring
    restart: unless-stopped

  # Node exporter - metryki systemowe (opcjonalnie)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

networks:
  mongonet: { }
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: